r"""Portage
===========
"""
import os
from gzip import decompress
from typing import Any

from bs4 import BeautifulSoup, FeatureNotFound
from platformdirs import site_data_dir
from pypandoc import convert_text


def get_soup(filename: str) -> BeautifulSoup:
    r"""Get soup.

    :param filename:
    :type filename: str
    :rtype: BeautifulSoup
    """
    with open(
        os.path.join(
            os.path.join(site_data_dir("man"), "man5"), filename + ".5.gz"
        ),
        "rb",
    ) as f:
        html = convert_text(decompress(f.read()).decode(), "html", "man")
    try:
        soup = BeautifulSoup(html, "lxml")
    except FeatureNotFound:
        soup = BeautifulSoup(html, "html.parser")
    return soup


def init_schema() -> dict[str, Any]:
    r"""Init schema.

    :rtype: dict[str, dict[str, Any]]
    """
    schemas = {}
    for filetype in {"color.map", "make.conf", "ebuild"}:
        schemas[filetype] = {
            "$id": (
                "https://github.com/termux/termux-language-server/"
                f"blob/main/src/termux_language_server/assets/json/{filetype}.json"
            ),
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$comment": (
                "Don't edit this file directly! It is generated by "
                f"`termux-language-server --generate-schema={filetype}`."
            ),
            "type": "object",
            "required": [],
            "properties": {},
        }
    dl = get_soup("color.map").findAll("dl")[1]
    for dt, dd in zip(dl.findAll("dt"), dl.findAll("dd")):
        description = dt.text + "\n" + dd.text.replace("\n", " ").strip()
        schemas["color.map"]["properties"][dt.strong.text] = {
            "description": description,
        }
    for dl in get_soup("make.conf").findAll("dl")[:-2]:
        for dt, dd in zip(dl.findAll("dt"), dl.findAll("dd")):
            if dt.strong is None:
                continue
            description = dt.text + "\n" + dd.text.replace("\n", " ").strip()
            schemas["make.conf"]["properties"][dt.strong.text] = {
                "description": description,
            }
    for dl in get_soup("ebuild").findAll("dl")[20:-2]:
        for dt, dd in zip(dl.findAll("dt"), dl.findAll("dd")):
            if dt.strong is None or dt.strong.text.endswith(":"):
                continue
            description = dt.text + "\n" + dd.text.replace("\n", " ").strip()
            schemas["ebuild"]["properties"][dt.strong.text.split()[0]] = {
                "description": description,
            }
    return schemas
